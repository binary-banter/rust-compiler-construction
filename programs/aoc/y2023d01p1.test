fn read_char() -> I64 {
    let mut v = 0;
    let mut res = 0;
    asm {
        subq $8 %RSP    // allocate stack space for reading char
        movq $0 %RAX    // read
        movq $0 %RDI    // stdin
        movq %RSP %RSI  // put read char at top of stack
        movq $1 %RDX    // read 1 byte
        syscall 4       // arity of 4
        movq %RAX {res} // result of system call
        popq {v}        // pop read char
    };
    if res == 0 {
        return res
    };
    v
}

fn main() {
    let ASCII_NEWLINE = 10;
    let ASCII_ZERO = 48;
    let ASCII_NULL = 0;

    let mut total = 0;
    let mut first = 0;
    let mut last = 0;

    let mut next = 0;
    while (next = read_char(); next != ASCII_NULL) {
        if next == ASCII_NEWLINE {
            total = total + first * 10 + last;
            first = 0;
        };
        next = next - ASCII_ZERO;
        if next >= 0 && next < 10 {
            if first == 0 {
                first = next;
            };
            last = next;
        };
    };
    print(total);
}
