use std::str::FromStr;
use crate::passes::parse::{Def, Expr, Lit, Op, Param};
use crate::passes::parse::PrgParsed;
use crate::passes::type_check::Type;

grammar;

match {
    // Keywords
    "fn",
    "let",
    "if",
    "else",
    "loop",
    "while",
    "break",
    "continue",
    "return",
    "mut",
    "struct",
    "enum",
    "switch",
    "never",

    // Structural tokens
    "(",
    ")",
    "{",
    "}",
    "->",
    "=",
    ";",
    ",",
    ":",
    ".",
    "::",
    "=>",

    // Identifier
    r"[_a-zA-Z][_a-zA-Z0-9]*",

    // Integer operators
    "+",
    "-",
    "*",
    "/",
    "%",

    // Cursed build-in functions
    "read",
    "print",

    // Types
    "Int",
    "Bool",
    "Unit",
    "Never",

    // Literals
    "true",
    "false",
    "unit",
    r"[0-9]+",

    // Logical operators
    "^",
    "&&",
    "||",
    "!",

    // Compartive operators
    "==",
    "!=",
    ">",
    ">=",
    "<",
    "<=",

    // Whitespaces
    r"\s+" => {},

    // Line comments
    r"//[^\n]*\n" => {},

    // Block comments
    r"/\*([^*]|(\*[^/]))*\*/" => {},
}

pub Program: PrgParsed<'input> = {
    <defs: Def*> => PrgParsed {
        defs,
        entry: "main"
    }
}

Def: Def<&'input str, Expr<&'input str>> = {
    "struct" <sym:Ident> "{" <fields:Comma<(<Ident> ":" <Type>)>> "}" => Def::Struct {
        sym,
        fields,
    },
    "enum" <sym:Ident> "{" <variants:Comma<(<Ident> ":" <Type>)>> "}" => Def::Enum {
        sym,
        variants,
    },
    "fn" <sym:Ident> "(" <params:Comma<Param>> ")" <typ:("->" <Type>)?> "{" <bdy: Expr<Struct>> "}" => Def::Fn {
        sym,
        params,
        typ: typ.unwrap_or(Type::Unit),
        bdy
    },
}

Param: Param<&'input str> = {
    <mutable:"mut"?> <sym:Ident> ":" <typ:Type> => Param {
        mutable: mutable.is_some(),
        sym,
        typ,
    }
}

Type: Type = {
    "Int" => Type::Int,
    "Bool" => Type::Bool,
    "Unit" => Type::Unit,
    "Never" => Type::Never,
}

// We have the following precedence:
// ExprStmt
// ExprInStmt
// ExprLogicalOr
// ExprLogicalAnd
// ExprComparative
// ExprXor
// ExprAdditive
// ExprMultiplicative
// ExprUnary
// ExprCall
// ExprAtom
// Num/Bool/Ident
Expr<T> = ExprStmt<T>;

ExprStmt<T>: Expr<&'input str> = {
    "let" <mutable:"mut"?> <sym:Ident> "=" <bnd:ExprLogicalOr<T>> ";" <bdy:ExprStmt<T>?> => Expr::Let {
        sym,
        mutable: mutable.is_some(),
        bnd: Box::new(bnd),
        bdy: Box::new(bdy.unwrap_or(Expr::Lit { val: Lit::Unit })),
    },
    <stmt:ExprInStmt<T>> ";" <cnt:ExprStmt<T>?> => Expr::Seq {
        stmt: Box::new(stmt),
        cnt: Box::new(cnt.unwrap_or(Expr::Lit { val: Lit::Unit })),
    },
    ExprInStmt<T>,
}

ExprInStmt<T>: Expr<&'input str> = {
    <sym:Ident> "=" <bnd:ExprLogicalOr<T>> => Expr::Assign {
        sym,
        bnd: Box::new(bnd),
    },
    "if" <cnd:ExprLogicalOr<Never>> "{" <thn:Expr<T>> "}" <els:("else" "{" <Expr<T>> "}")?> => Expr::If {
        cnd: Box::new(cnd),
        thn: Box::new(thn),
        els: Box::new(els.unwrap_or(Expr::Lit { val: Lit::Unit })),
    },
    "loop" "{" <bdy:Expr<T>> "}" => Expr::Loop {
        bdy: Box::new(bdy),
    },
    "while" <cnd:ExprLogicalOr<Never>> "{" <bdy:Expr<T>> "}" => Expr::Loop {
        bdy: Box::new(Expr::If {
            cnd: Box::new(cnd),
            thn: Box::new(bdy),
            els: Box::new(Expr::Seq {
                stmt: Box::new(Expr::Break { bdy: Box::new(Expr::Lit { val: Lit::Unit }) }),
                cnt: Box::new(Expr::Lit { val: Lit::Unit }),
            }),
        }),
    },
    "switch" <enm:ExprLogicalOr<Never>> "{" <arms:Comma<(<Ident> "(" <Ident> ")" "=>" <Expr<T>> )>> "}"  => Expr::Switch {
        enm: Box::new(enm),
        arms: arms.into_iter().map(|(s1, s2, e)| (s1, s2, Box::new(e))).collect(),
     },
    "break" <bdy:ExprLogicalOr<T>?> => Expr::Break {
        bdy: Box::new(bdy.unwrap_or(Expr::Lit { val: Lit::Unit })),
    },
    "return" <bdy:ExprLogicalOr<T>?> => Expr::Return {
        bdy: Box::new(bdy.unwrap_or(Expr::Lit { val: Lit::Unit })),
    },
    "continue" => Expr::Continue,
    ExprLogicalOr<T>,
}

BinaryOps<Op,Next>: Expr<&'input str> = {
    <e1:BinaryOps<Op,Next>> <op:Op> <e2:Next> => Expr::Prim {
        op,
        args: vec![e1, e2],
    },
    Next,
}

ExprLogicalOr<T> = BinaryOps<LogicalOrOp, ExprLogicalAnd<T>>;
ExprLogicalAnd<T> = BinaryOps<LogicalAndOp, ExprComparative<T>>;
ExprComparative<T> = BinaryOps<ComparativeOp, ExprXor<T>>;
ExprXor<T> = BinaryOps<XorOp, ExprAdditive<T>>;
ExprAdditive<T> = BinaryOps<AdditiveOp, ExprMultiplicative<T>>;
ExprMultiplicative<T> = BinaryOps<MultiplicativeOp, ExprUnary<T>>;

LogicalOrOp: Op = "||" => Op::LOr;
LogicalAndOp: Op = "&&" => Op::LAnd;
ComparativeOp: Op = {
    "==" => Op::EQ,
    "!=" => Op::NE,
    ">" => Op::GT,
    ">=" => Op::GE,
    "<" => Op::LT,
    "<=" => Op::LE,
}
XorOp: Op = "^" => Op::Xor;
AdditiveOp: Op = {
    "+" => Op::Plus,
    "-" => Op::Minus,
}
MultiplicativeOp: Op = {
   "*" => Op::Mul,
   "/" => Op::Div,
   "%" => Op::Mod,
}
UnaryOp: Op = {
    "-" => Op::Minus,
    "!" => Op::Not,
}

ExprUnary<T>: Expr<&'input str> = {
    <op:UnaryOp> <e:ExprUnary<T>> => Expr::Prim {
        op,
        args: vec![e],
    },
    ExprCall<T>,
}

ExprCall<T>: Expr<&'input str> = {
    "read" "(" ")" => Expr::Prim {
        op: Op::Read,
        args: vec![],
    },
    "print" "(" <e: Expr<T>> ")" => Expr::Prim {
        op: Op::Print,
        args: vec![e],
    },
    <fun:ExprAtom<T>> "(" <args:Comma<Expr<T>>> ")" => Expr::Apply {
        fun: Box::new(fun),
        args,
    },
    ExprAtom<T>,
}

ExprAtom<T>: Expr<&'input str> = {
    <val:Num> => Expr::Lit{ val: Lit::Int { val }},
    <val:Bool> => Expr::Lit { val: Lit::Bool { val }},
    "unit" => Expr::Lit { val: Lit::Unit },
    <sym:Ident> => Expr::Var { sym },
    <enum_sym:Ident> "::" <variant_sym:Ident> "(" <bdy:Expr<T>> ")" => Expr::Variant {
        enum_sym,
        variant_sym,
        bdy: Box::new(bdy),
    },
    "(" <Expr<Struct>> ")",
    <T>,
}

Struct: Expr<&'input str> = {
    <sym:Ident> "{" <fields:Comma<(<Ident> ":" <Expr<Struct>>)>> "}" => Expr::Struct {
        sym,
        fields,
    },
}

Never: Expr<&'input str> = {
    "never" => panic!("The reserved keyword 'never' should never be parsed.")
}

Ident: &'input str = r"[_a-zA-Z][_a-zA-Z0-9]*";

Num: i64 = <s:r"[0-9]+"> => i64::from_str(s).unwrap();

Bool: bool = {
    "true" => true,
    "false" => false,
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}
